library 'ref-this-pipeline'
library 'NoSrvAccount'

String configFile = 'cicd/build/jenkins-spec.yml'
String successEmailList = 'abc@sample.com, def@sample.com'
String failEmailList = 'abc@sample.com, def@sample.com'

cfg = [:]

pipeline {
 agent any

    options {
        disableConcurrentBuilds()
        buildDiscarder(logRotator(numToKeepStr: '10'))
    }

    tools {
        jdk 'JAVA_8'
        maven 'Maven 3.3.9'
    }

		environment {
            approverEmailList="abc@sample.com, def@sample.com"
		    approverId="1234567 , 12343432"

			service1_CLIENT_ID_L1=credentials('service1_CLIENT_ID_L1')
			service1_CLIENT_SECRET_L1=credentials('service1_CLIENT_SECRET_L1')
			ECS_S3_ACCESS_KEY_L1=credentials('ECS_S3_ACCESS_KEY_L1')
			ECS_S3_SECRET_KEY_L1=credentials('ECS_S3_SECRET_KEY_L1')
			
			service1_CLIENT_ID_L3=credentials('service1_CLIENT_ID_L3')
            service1_CLIENT_SECRET_L3=credentials('service1_CLIENT_SECRET_L3')
			ECS_S3_ACCESS_KEY_L3=credentials('ECS_S3_ACCESS_KEY_L1')
            ECS_S3_SECRET_KEY_L3=credentials('ECS_S3_SECRET_KEY_L1')

			service1CXS_ACTUATOR_USER_NAME=credentials('service1CXS_ACTUATOR_USER_NAME')
			service1CXS_ACTUATOR_USER_PASSWORD=credentials('service1CXS_ACTUATOR_USER_PASSWORD')
			
			APP_VERSION = readMavenPom().getVersion()
			APP_GROUP = readMavenPom().getGroupId() 
		}

	stages {
		stage('Read App Configuration') {
            steps {
                script {
                    cfg = readYaml file:"${configFile}"
                    deployConfigs = mapConfigToLevels(cfg)
                }
            }
        }

		stage('Build and Unit Test') {
            steps {
                script {
                    sh 'mvn -s settings.xml -N wrapper:wrapper'
                    sh 'mkdir -p .mvn/wrapper && cp maven-wrapper.properties .mvn/wrapper/'
                    sh './mvnw -s settings.xml clean package -U'
                }
            }
		}

		stage('Deploy DEV') {
		 	when {
				anyOf {
				    branch 'develop';
				}
			}
			steps {
                script {
                    deployToPCF(deployConfigs.develop)
                }
            }
			post {
                failure {
                    script {
                        failMessage = 'Failed To Deploy DEV'
                    }
                }
            }
		}

		stage('Deploy RELEASE') {
        	when {
        		anyOf {
        	 		branch 'release';
        		}
        	}
            steps {
                script {
                    deployToPCF(deployConfigs.release)
                }
            }
            post {
                failure {
                    script {
                        failMessage = 'Failed To Deploy RELEASE'
                    }
                }
            }
        }

		stage('DEV SonarQube') {
		 	when {
				anyOf {
				    branch 'develop';
				}
			}
			steps {
				sonarqube  (
					projectName: "${cfg.sonar_project_name}",
					projectKey: "${APP_GROUP}",
					src: 'src/main/java',
					binaries: "target",
					eai: '1234567',
					exclusions: "**/config/*,**/src/test/*,**/src/main/resources/**",
					projectVersion: "1.0",
					junitPath: "build/test-results/test",
					jacocoPath: "build/jacoco/test.exec"
				)
			}
		}
    }

    post {

        failure {    // notify users when the Pipeline fails
            mail(to: "${failEmailList}", subject: "Jenkins Pipeline Failure Notice", body: "**************** SOMETHING WENT WRONG **********************\n\n\n\nHi\n\nThe Application Continuous Delivery pipeline for the ${cfg.name} service failed. \n\nThe Link to the failed Jenkins pipeline can be found here: \n\n${env.BUILD_URL} \n\nPlease navigate to the above mentioned Jenkins job to see the logs.\n\nThanks!")
        }
        success {    // notify users when the Pipeline succeeds
            mail(to: "${successEmailList}", subject: "Jenkins Pipeline Executed Successfully", body: "**************** Application Deployment Successful **********************\n\nHi\n\nThe Application Continuous Delivery pipeline for the ${cfg.name} service is Successfully executed. \n\nThe Link to the Successful Jenkins pipeline can be found here: \n\n${env.BUILD_URL} \n\nPlease navigate to the above mentioned Jenkins job to see the logs.\n\nThanks!")
        }
        always {
            cleanWs()
        }
    }
}

class AppDeployment {
	String eai
	String appName
    String pamId
    String cfSpace
	String alias
    List dataCenters
    String integrationTestProperties
    String loadBalanceHostname
    String loadBalanceDomain
    List services
    List environmentVariables
	String artifactName
	String appdAgentAppName
	String appdAgentTierName
	String appdPlan
	String profile
	String configServerHostName
}

Map mapConfigToLevels(Map cfg) {
    Map deployConfigs = [:]
    cfg.levels.each({ level ->
        Map app = cfg."${level}"
        List dataCenters = []
        app.dataCenters.each({ dc ->
            dataCenters << cfg.pcf."${dc}"
        })

        String loadBalanceDomain = ""
        if (app.gslbHostname) {
            loadBalanceDomain = app.space == "production" ? cfg.pcf.PROD_GSLB_DOMAIN : cfg.pcf.DEV_GSLB_DOMAIN
        }

        deployConfigs[level] = new AppDeployment(
			eai: "${cfg.eai}",
			appName: "${cfg.appName}",
            pamId: "${cfg.pamId}",
            cfSpace: app.space,
            dataCenters: dataCenters,
            integrationTestProperties: app.integrationTestProperties,
            loadBalanceHostname: app.gslbHostname,
            loadBalanceDomain: loadBalanceDomain,
			appdAgentAppName: app.appdAgentAppName,
            appdAgentTierName: app.appdAgentTierName,
            appdPlan: app.appdPlan,
            services: app.services,
            environmentVariables: app.environmentVariables,
			artifactName: "${cfg.artifactName}",
			alias: app.alias,
			profile: app.profile,
			configServerHostName: app.configServerHostName
        )
    })
    return deployConfigs
}

def deployToPCF(app) {
	app.dataCenters.each( { dc ->
        println "Reading Data Centers for Deployment"
		println dc
		println app
		println app.pamId
		println app.cfSpace
		println app.alias
		println app.appName
		println app.appdPlan
		println app.appdAgentAppName
		println app.appdAgentTierName
		println dc.foundation
		println app.eai
		println dc.domain
		
		println app.configServerHostName

		appdNodeIndex = "1234567" + "-" + "${dc.foundation}" + "-"
		println appdNodeIndex

		REPLICAS = 1

        if(app.cfSpace.equalsIgnoreCase('development')){
			GSLB_NAME = "service1-cxs-dev"
			ENV_PROPERTIES = ["hostname" : "${app.appName}", "foundation" : "${dc.foundation}", "APPD_CF_NODE_PREFIX" : "${appdNodeIndex}"]
			CUPS_PROPERTIES = ["clientId": "${service1_CLIENT_ID_L1}", "clientSecret":"${service1_CLIENT_SECRET_L1}",
			"actuatorUserName":"${service1CXS_ACTUATOR_USER_NAME}", "actuatorPassword":"${service1CXS_ACTUATOR_USER_PASSWORD}",
			"ecs-access-key":"${ECS_S3_ACCESS_KEY_L1}", "ecs-secret-key":"${ECS_S3_SECRET_KEY_L1}"]
		} else if(app.cfSpace.equalsIgnoreCase('release')){
			GSLB_NAME = "service1-cxs-test"
			ENV_PROPERTIES = ["hostname" : "${app.appName}", "foundation" : "${dc.foundation}", "APPD_CF_NODE_PREFIX" : "${appdNodeIndex}"]
			CUPS_PROPERTIES = ["clientId": "${service1_CLIENT_ID_L3}", "clientSecret":"${service1_CLIENT_SECRET_L3}",
			"actuatorUserName":"${service1CXS_ACTUATOR_USER_NAME}", "actuatorPassword":"${service1CXS_ACTUATOR_USER_PASSWORD}",
			"ecs-access-key":"${ECS_S3_ACCESS_KEY_L3}", "ecs-secret-key":"${ECS_S3_SECRET_KEY_L3}"]
        }

		println "Deploying to PCF"

        pcfBlueGreenDeploy pamId: "${app.pamId}",
			url: "${dc.url}",
			stage: "${app.cfSpace}",
			level: "${app.alias}",
			appName: "${app.appName}",
			instances: "${REPLICAS}",
			jarPath: "target/*.jar",
			foundation: "${dc.foundation}",	
			eaiNum: "${app.eai}",
			eaiAppName: "${app.artifactName}",
			props: ENV_PROPERTIES,
			appdPlan: "${app.appdPlan}",
			appdAgentAppName: "${app.appdAgentAppName}",
			appdAgentTierName: "${app.appdAgentTierName}",
			appdServiceInstance: "dxo-document-cxs-1234567",
			gslbName: "${GSLB_NAME}",
            timeout: 180,
			cupsName: "service1-auth-dev",
			cupsProps: CUPS_PROPERTIES,
			javaOpts: "-Dspring.profiles.active=${app.profile} -Dspring.config.import=configserver:${app.configServerHostName}.app.${dc.foundation}.sample.com",
	        smoke:{
				echo "Update your smoke test cases here"
				def URL = "https://${app.appName}-${app.alias}-tmp.${dc.domain}/health"
				def VerifyText = "{\"status\":\"UP\"}"
				def SERVICE_STATUS = sh (script: "curl -f -s ${URL} > /dev/null", returnStatus: true)
				echo "$SERVICE_STATUS"
				if( SERVICE_STATUS != 0 )
					error "Unable to connect to service (${SERVICE_STATUS}): ${URL}"
				def SERVICE_BODY = sh ( script: "curl -s ${URL}", returnStdout: true ).trim()
				assert SERVICE_BODY.contains(VerifyText) : "JSON Does not contain ${VerifyText} for ${URL}"
		    }
	})
}

def createServices(app) {
   
    def serviceCredentials = []

        app.services.each({ service ->
            service.parameters.each({ parameter ->
                if (parameter.credentialId) {
                    serviceCredentials << [$class: 'StringBinding',
                                           credentialsId: parameter.credentialId,
                                           variable: "credential_${parameter.credentialId}"]
                }
            })
        })

        withCredentials(serviceCredentials) {
            app.services.each({ service ->
                service.parameters.each { parameter ->
                    if (parameter.credentialId) {
                        parameter.value = env."credential_${parameter.credentialId}"
                    }
                }
            })

            app.dataCenters.each({ dc ->
                createUpdateServices([
                        pamId    : "${app.pamId}",
                        pcfApiUrl: dc.url,
                        pcfSpace : app.cfSpace,
                        services : app.services])
            })
        }
}

def sendApprovalEmail(String deploymentLevel) {
    mail body: "Hi\n\nThis email is been generated by: ${env.BUILD_URL}input\n\nPlease click on the Jenkins link to approve the deployment. \n\nThanks! \n", subject: "DEPLOYMENT APPROVAL REQUIRED FOR ${deploymentLevel}", to: "${approverEmailList}"
    input message: "Do you approve the deployment?", ok: 'Approve', submitter: "${approverId}"
}